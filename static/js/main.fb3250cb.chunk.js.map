{"version":3,"sources":["components/Timer.js","components/BreakController.js","components/SessionController.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","isSession","timerSeconds","intervalId","alarmColor","color","play","bind","stop","reset","decreaseTimer","startAlarm","setInterval","this","setState","timerMinute","playBeep","onToggleInterval","updateTimerMinute","prevState","clearInterval","onResetTimer","refs","beepSound","console","log","className","style","id","onClick","ref","src","type","Component","BreakController","decreaseBreak","value","breakInterval","increaseBreak","SessionController","decreaseSession","sessionLength","increaseSession","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb3250cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Timer.css';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state={\r\n          isSession: true,\r\n          timerSeconds: 0,\r\n          intervalId: 0,\r\n          alarmColor: {color:'#EA3B2E'}\r\n        }\r\n\r\n\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.reset= this.reset.bind(this);\r\n        this.decreaseTimer= this.decreaseTimer.bind(this);\r\n        this.startAlarm= this.startAlarm.bind(this);\r\n    }\r\n\r\n\r\n\r\n    play(){\r\n      let intervalId = setInterval(this.decreaseTimer, 1000);\r\n      this.setState({\r\n        intervalId: intervalId\r\n      })\r\n    }\r\n\r\n    startAlarm(){ \r\n      if ((this.props.timerMinute ===0 ) && (this.state.timerSeconds === 1)){\r\n          this.setState({\r\n            alarmColor: {color:'red'} \r\n          });\r\n          this.playBeep();   \r\n    }\r\n  }\r\n  \r\n    decreaseTimer(){\r\n      switch (this.state.timerSeconds){\r\n       case 0:\r\n         if(this.props.timerMinute===0){\r\n           if(this.state.isSession){\r\n             this.setState({\r\n               isSession: false,\r\n               alarmColor: {color:'green'}\r\n             })\r\n             this.props.onToggleInterval(this.state.isSession);\r\n           } \r\n           else{\r\n            this.setState({\r\n              isSession: true,\r\n              alarmColor: {color:'#EA3B2E'}\r\n            })\r\n            this.props.onToggleInterval(this.state.isSession);\r\n           }\r\n\r\n                 \r\n         }\r\n         this.props.updateTimerMinute()\r\n         this.setState({\r\n           timerSeconds: 59\r\n         })\r\n         break;\r\n         case 1:\r\n          if(this.props.timerMinute===0){\r\n            this.startAlarm();\r\n          }\r\n\r\n         default:\r\n           this.setState((prevState) =>{\r\n             return{\r\n             timerSeconds: prevState.timerSeconds - 1\r\n           } \r\n           })\r\n           break;\r\n          \r\n      }\r\n     }\r\n\r\n     stop(){\r\n       clearInterval(this.state.intervalId)\r\n     }\r\n\r\n     reset(){\r\n      this.stop();\r\n      this.props.onResetTimer()\r\n      this.setState({\r\n        timerSeconds: 0,\r\n        alarmColor: {color:'#EA3B2E'},\r\n        isSession: true\r\n      })\r\n     }\r\n\r\n     playBeep() {\r\n      this.refs.beepSound.play();\r\n    }\r\n     \r\n\r\n     render(){\r\n      \r\n      console.log (this.state.timerSeconds)\r\n        return(\r\n            <div>\r\n          <div className=\"timer\" style={this.state.alarmColor}>              \r\n        <div id=\"timer-label\">{this.state.isSession ===true ? 'Session' : 'Break'}</div>           \r\n        <div id=\"time-left\">\r\n        <span>{this.props.timerMinute}</span>:\r\n        <span>{this.state.timerSeconds === 0 ? '00' : this.state.timerSeconds < 10 ? '0'+ this.state.timerSeconds : this.state.timerSeconds}</span></div>\r\n          </div>\r\n          <div className=\"timer-control\">\r\n              <button onClick={this.play} id=\"start_stop\" className=\"btn-control\"><i className=\"fa fa-play fa-2x\"></i></button>\r\n              <button onClick={this.stop} className=\"btn-control\"> <i className=\"fa fa-pause fa-2x\"></i></button>\r\n              <button onClick={this.reset} id=\"reset\" className=\"btn-control\"><i className=\"fa fa-refresh fa-2x\"></i></button>\r\n              <audio\r\n          id=\"beep\"\r\n          ref=\"beepSound\"\r\n          src=\"https://api.coderrocketfuel.com/assets/pomodoro-times-up.mp3\"\r\n        >\r\n          <source\r\n            src=\"https://api.coderrocketfuel.com/assets/pomodoro-times-up.mp3\"\r\n            type=\"audio/mpeg\"\r\n          />\r\n        </audio>\r\n              </div>\r\n              </div>\r\n\r\n        )\r\n\r\n     }\r\n\r\n}\r\n\r\nexport default Timer","import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction BreakController(props) {\r\n\r\n    \r\n        return(\r\n          <div className=\"length-control\">\r\n              \r\n              <div id=\"break-label\" className=\"labels\">Break Length</div>\r\n              <div className=\"controls\">\r\n              <button  onClick={props.decreaseBreak} id=\"break-decrement\" className=\"btn-level btn\" value=\"-\"><i className=\"fa fa-arrow-down fa-2x\"></i></button>\r\n        <div id=\"break-length\" className=\"btn-level\">{props.breakInterval}</div>\r\n              <button onClick={props.increaseBreak} id=\"break-increment\" className=\"btn-level btn\" value=\"+\"><i className=\"fa fa-arrow-up fa-2x\"></i></button>\r\n              </div>\r\n              </div>\r\n\r\n\r\n        )    \r\n\r\n}\r\n\r\nexport default BreakController","import React from 'react';\r\n\r\n\r\n\r\nfunction SessionController(props){\r\n    \r\n        return(\r\n            <div className=\"length-control\">\r\n\r\n            <div id=\"session-label\" className=\"labels\">Session Length</div>\r\n            <div className=\"controls\">\r\n            <button onClick={props.decreaseSession} id=\"session-decrement\" className=\"btn-level btn\" value=\"-\"><i className=\"fa fa-arrow-down fa-2x\"></i></button>\r\n        <div id=\"session-length\" className=\"btn-level\">{props.sessionLength}</div>\r\n            <button onClick={props.increaseSession} id=\"session-increment\" className=\"btn-level btn\" value=\"+\"><i className=\"fa fa-arrow-up fa-2x\"></i></button>\r\n            </div>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default SessionController","import React, {Component} from 'react';\nimport Timer from './components/Timer';\nimport BreakController from  './components/BreakController';\nimport SessionController from  './components/SessionController';\nimport Sound from './components/Sound';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state={\n        breakLength: 5,\n        sessionLength:25,\n        timerMinute: 25\n    }\n\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n}\n\nonIncreaseBreakLength() {\n  if(this.state.breakLength === 60){\n    return;\n}\n  this.setState((prevState) => {\n    return{\n      breakLength: prevState.breakLength + 1,\n      \n    }\n  })\n}\n\nonDecreaseBreakLength() {\n  if(this.state.breakLength === 1){\n    return;\n}\n  this.setState((prevState) => {\n    return{\n      breakLength: prevState.breakLength - 1\n    }\n  })\n}\n\nonIncreaseSessionLength() {\n  if(this.state.sessionLength === 60){\n    return;\n}\n  this.setState((prevState) => {\n    return{\n      sessionLength: prevState.sessionLength + 1,\n      timerMinute: prevState.sessionLength + 1\n    }\n  })\n}\n\nonDecreaseSessionLength() {\n  if(this.state.sessionLength === 1){\n    return;\n}\n  this.setState((prevState) => {\n    return{\n      sessionLength: prevState.sessionLength - 1,\n      timerMinute: prevState.sessionLength-1\n    }\n  })\n}\n\nonUpdateTimerMinute(){\n \n  this.setState((prevState) =>{\n    return{\n      timerMinute: prevState.timerMinute - 1\n    }\n  })\n\n\n\n}\n\nonToggleInterval(isSession){\n  if(isSession){\n  this.setState((prevState)=>{\n    return{\n      timerMinute: this.state.sessionLength\n    }\n  })\n}\n  else{\n    this.setState((prevState)=>{\n      return{\n        timerMinute: this.state.breakLength\n      }\n    })\n  }\n}\n\nonResetTimer(){\n  this.setState({\n    timerMinute: 25,\n    breakLength: 5,\n    sessionLength: 25\n\n  })\n}\n\n  render(){\n  return (\n    <div className=\"main\">\n      <h1>CountMeDown</h1>\n      <div className='wrapper'>\n        <div className ='controllers'>\n      <BreakController breakInterval={this.state.breakLength}\n                       increaseBreak={this.onIncreaseBreakLength}\n                       decreaseBreak = {this.onDecreaseBreakLength} \n                       />\n      <SessionController  \n      sessionLength={this.state.sessionLength} \n      increaseSession = {this.onIncreaseSessionLength}\n      decreaseSession = {this.onDecreaseSessionLength}\n      />\n      </div>\n      <Timer timerMinute = {this.state.timerMinute}\n             breakLength= {this.state.breakLength}\n             updateTimerMinute={this.onUpdateTimerMinute}  \n             onToggleInterval={this.onToggleInterval}  \n             onResetTimer= {this.onResetTimer}   \n      />\n      \n      \n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}